/* 아래 기본 제공된 코드를 수정 또는 삭제하고 본인이 코드를 사용하셔도 됩니다.
   단, 사용하는 클래스명이 Solution 이어야 하며, 가급적 Solution.java 를 사용할 것을 권장합니다.
   이러한 상황에서도 동일하게 java Solution 명령으로 프로그램을 수행해 볼 수 있습니다. */
import java.io.FileInputStream;
import java.util.Scanner;

class Solution4 {
	public static void main(String args[]) throws Exception	{
		//다트게임. 
		/* 아래 메소드 호출은 앞으로 표준입력(키보드) 대신 input.txt 파일로 부터 읽어오겠다는 의미의 코드입니다.
		   만약 본인의 PC 에서 테스트 할 때는, 입력값을 input.txt에 저장한 후 이 코드를 첫 부분에 사용하면,
		   표준입력 대신 input.txt 파일로 부터 입력값을 읽어 올 수 있습니다.
		   또한, 본인 PC에서 아래 메소드를 사용하지 않고 표준입력을 사용하여 테스트하셔도 무방합니다.
		   단, Codeground 시스템에서 "제출하기" 할 때에는 반드시 이 메소드를 지우거나 주석(//) 처리 하셔야 합니다. */
		Scanner sc = new Scanner(new FileInputStream("input.txt"));
        
		//Scanner sc = new Scanner(System.in);

		int TC;
		int test_case;

		TC = sc.nextInt();        
		for(test_case = 1; test_case <= TC; test_case++) {
			// 이 부분에서 알고리즘 프로그램을 작성하십시오.
			int bul=sc.nextInt();
			int triple = sc.nextInt();
			int endtri = sc.nextInt();
			int stdo = sc.nextInt();
			int enddo = sc.nextInt();
			int dartcount = sc.nextInt();
			int[] score = {6,13,4,18,1,20,5,12,9,14,11,8,16,7,19,3,17,2,15,10};			
			int result = 0;
			int sc1=0;double r=0;

			for(int i=0;i<dartcount;i++){
				int x = sc.nextInt(),y=sc.nextInt();
				int distance = (int)Math.sqrt((Math.pow(x, 2)+Math.pow(y, 2)));
				
				r=y/(double)x;
				
				double theta = Math.toDegrees(Math.atan(r));
				if(r<0) theta = theta+180;
				int ha = (int)(theta+9)/18;
				if(y<0||x<0) ha+=10;
				
				sc1= score[ha];
				if(distance<bul) result+=50;
				else if(distance>triple&&distance<endtri)	result+=sc1*3;
				else if(distance>stdo&&distance<enddo)	result+=sc1*2;
				else if(distance>enddo) ;
				else	result+=sc1;
			}
			// 이 부분에서 정답을 출력하십시오.
			System.out.println("Case #" + test_case);
			System.out.println(result);
		}
	}
}
